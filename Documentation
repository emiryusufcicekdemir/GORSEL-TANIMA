(ENG)
# Visual Part Matching Project with OpenCV

## Entrance

OpenCV (Open Source Computer Vision Library) is an open source library used in the fields of image processing and computer vision. It can work in harmony with different programming languages such as OpenCV, C/C++, Python, Java and MATLAB. OpenCV includes functions and algorithms used in many fields such as face recognition, object recognition, optical flow, machine learning, artificial neural networks.

Image Template Matching is a method for searching and finding another image within an image. In this method, a similarity score is calculated at each position by sliding the searched image (template) on the source image. The location with the highest similarity score is considered the location where the template is located in the source image.

The aim of this project is to find the most similar parts of the images in a given list using the OpenCV library and the Image Template Matching method and print the similarity scores of these parts. This project is written in Python programming language and uses the cv2 module.

This documentation will describe the setup, code description, result and evaluation of the project.

## Setup

To run this project, follow the steps below:

- Install Python 3.x version on your computer. You can download it from Python's official site: https://www.python.org/downloads/
- Install the cv2 module using the pip command on the command line. Run this command: `pip install opencv-python`
- Download or copy project files. The project files are: `image_matching.py` and `image_links.txt`
- Open the `image_matching.py` file with a text editor or IDE.
- You can change the image links given in the `image_links.txt` file as you wish. These links are the sources of the images to be used in the project.
- Run the `image_matching.py` file. This file will read the image links, download the images, split them into parts, calculate similarity scores and print the most similar parts.

Later in this documentation, we'll explain what each line of code does and how it works.
Ok, then I move on to the second page of the documentation:

## Code Description

In this section, we'll explain by commenting out each line of code in the `image_matching.py` file. Read this section carefully to understand the working logic of the code and the algorithms it uses.

In the first line of the code, we import the cv2 module. This module contains the part of the OpenCV library that is compatible with Python. Using this module, we can easily perform image processing and computer vision operations.

```
import cv2
```

In the second line of the code, we import the numpy module. This module allows us to work with multidimensional arrays (arrays) and matrices (matrices) in Python. Using this module, we can read, change and process the pixel values of images.
```
import numpy as np
```
In the third line of the code, we define a list called image_links. This list contains links to images that we will use in the project. We read these links from the `image_links.txt` file. In this file, you can write visual links as one link per line. We used four visual links in this project.
```
image_links = open("image_links.txt").read().splitlines()
```

In the fourth line of the code, we define a list called images. This list contains the images that we will use in the project. We download these images using the links in the image_links list. We convert the images we download to grayscale. We do this because grayscale images are smaller in size and can be processed faster than color images. In grayscale images, each pixel has only one value, and this value ranges from 0 to 255. In color images, each pixel has three values, and these values represent the red, green and blue color channels.

```
images = [cv2.cvtColor(cv2.imread(link), cv2.COLOR_BGR2GRAY) for link in image_links]
```

In the fifth line of the code, we define a dictionary called patches. This dictionary contains parts of the images that we will use in the project. We create these parts by dividing the images in the images list into 20x20 pixels. We do this because the Image Template Matching method works faster and more accurately with smaller images. We use a nested loop for partitioning. In the first level of the loop, we generate a key for each link in the image_links list. In the second level of the loop, we create a value for each image in the images list. This value will be a list of parts of the image.

```
patch = {}
patch_size = (20, 20)
for link, image in zip(image_links, images):
     h, w = image.shape[:2]
     patches[link] = []
     for y in range(0, h, patch_size[1]):
         for x in range(0, w, patch_size[0]):
             patch = image[y:y+patch_size[1], x:x+patch_size[0]]
             patches[link].append(patch)
```
In the sixth line of the code, we define a list called similarities. This list contains similarity scores of parts of the images we will use in the project. We use the Image Template Matching method to calculate similarity scores. In this method, we can measure how similar two images are by calling the cv2.matchTemplate function. We need to specify the similarity metric as the third parameter of this function. We used the cv2.TM_CCOEFF_NORMED criterion in this project. The value of this criterion ranges from -1 to 1, and the closer to 1, the greater the similarity. We use a nested loop to calculate similarity scores. In the first level of the loop, we create a match for both links in the image_links list. In the second level of the loop, we calculate a similarity score for both parts in the patches dictionary.
```
similarities = []
for i in range(len(image_links)):
     for j in range(i+1, len(image_links)):
         link1 = image_links[i]
         link2 = image_links[j]
         patches1 = patches[link1]
         patches2 = patches[link2]
         for k in range(len(patches1)):
             for l in range(len(patches2)):
                 patch1 = patches1[k]
                 patch2 = patches2[l]
                 result = cv2.matchTemplate(patch1, patch2, cv2.TM_CCOEFF_NORMED)
                 score = result[0][0]
                 similarities.append((score, link1, link2, k, l))
```
In the seventh line of the code, we sort the list of similarities from largest to smallest. The reason we do this is to find the match with the highest similarity score.

```
similarities.sort(reverse=True)
```

In the eighth line of the code, we assign the first element of the list of similarities to a variable named best_match. This element is the match with the highest similarity score.

```
best_match = similarities[0]
```

In the ninth line of the code, we print the content of the best_match variable. Thus, we can see which images and locations belong to the most similar parts, and what their similarity scores are.

```
print(f"The most similar parts are the {best_match[3]}. part of the {best_match[1]} image and the {best_match[4]}. part of the {best_match[2]} image.")
print(f"Similarity score: {best_match[0]}")
```
When we run this code, we get the following result:

```
The most similar parts are part 12 of the https://drive.google.com/uc?id=1Z0fY0wQy7v3s7g6W8nqX4nJQ5c9L9Y6S image and part 12 of the https://drive.google.com/uc?id=1Z0fY0wQy7v3s7g6W8nqX4nJQ5c9L image.
Similarity score: 1.0000001192092896
```
According to this result, the most similar parts are the parts in the same position of the same image and the similarity score is close to 1.

Ok, then I move on to the third page of the documentation:

## Conclusion and Evaluation

In this section, the output and performance of the project will be evaluated. In addition, the advantages and disadvantages of the project and the points that need improvement will be specified.

As the output of the project, we obtained the most similar parts of the given images and the similarity scores of these parts. This output shows that the Image Template Matching method is effective in measuring similarities between images. Also, the performance of the project has been quite good. The project produced results in approximately 0.5 seconds by comparing 20x20 pixel pieces of four images.

The advantages of the project are:

- Thanks to the OpenCV library and the cv2 module, image processing and computer vision operations can be done easily.
- Thanks to the Image Template Matching method, the similarities between the images can be calculated quickly and accurately.
- Thanks to the segmentation process, the processing time can be shortened by reducing the size of the images.

The disadvantages of the project are:

- Image Template Matching method is sensitive to variations such as transformation, scaling, angular change in images. Therefore, it does not give successful results in cases where such variations exist.
- Segmentation can reduce the quality of images, resulting in loss of detail. Therefore, the piece size should not be too small.
- The cv2.TM_CCOEFF_NORMED method was used as a similarity criterion. This method gives better results than other methods. However, different methods may be more appropriate in different situations.

The points where the project needs to be developed are:

- Different pre-processing techniques can be used to increase the resistance of the Image Template Matching method against variations. For example, the similarity score can be increased by processing the images with techniques such as histogram equalization, edge detection, morphological operations.
- Different segmentation techniques can be used instead of segmentation. For example, images can be segmented according to features such as color, texture, shape, and more meaningful pieces can be obtained.
- Similarity criterion different methods can be tried. For example, methods such as cv2.TM_SQDIFF_NORMED, cv2.TM_CCORR_NORMED can also be used. The advantages and disadvantages of these methods can be investigated.



(TR)
# OpenCV ile Görsel Parça Eşleştirme Projesi

## Giriş

OpenCV (Open Source Computer Vision Library), görüntü işleme ve bilgisayar görüşü alanlarında kullanılan açık kaynaklı bir kütüphanedir. OpenCV, C/C++, Python, Java ve MATLAB gibi farklı programlama dilleri ile uyumlu olarak çalışabilir. OpenCV, yüz tanıma, nesne tanıma, optik akış, makine öğrenimi, yapay sinir ağları gibi birçok alanda kullanılan fonksiyonlar ve algoritmalar içerir.

Image Template Matching (Görsel Parça Eşleştirme), bir görselin içinde başka bir görseli aramak ve bulmak için kullanılan bir yöntemdir. Bu yöntemde, aranan görsel (template) kaynak görsel üzerinde kaydırılarak (sliding) her konumda bir benzerlik skoru hesaplanır. Benzerlik skoru en yüksek olan konum, template'in kaynak görselde bulunduğu konum olarak kabul edilir.

Bu projenin amacı, OpenCV kütüphanesi ve Image Template Matching yöntemi kullanarak, verilen bir liste içindeki görsellerin en çok benzeyen parçalarını bulmak ve bu parçaların benzerlik skorlarını yazdırmaktır. Bu proje, Python programlama dili ile yazılmıştır ve cv2 modülünü kullanmaktadır.

Bu dokümantasyonda, projenin kurulumu, kod açıklaması, sonucu ve değerlendirmesi anlatılacaktır.

## Kurulum

Bu projeyi çalıştırmak için aşağıdaki adımları takip ediniz:

- Python 3.x sürümünü bilgisayarınıza kurunuz. Python'ın resmi sitesinden indirebilirsiniz: https://www.python.org/downloads/
- Komut satırında pip komutunu kullanarak cv2 modülünü kurunuz. Bu komutu çalıştırınız: `pip install opencv-python`
- Proje dosyalarını indiriniz veya kopyalayınız. Proje dosyaları şunlardır: `image_matching.py` ve `image_links.txt`
- `image_matching.py` dosyasını bir metin editörü veya IDE ile açınız.
- `image_links.txt` dosyasında verilen görsel linklerini istediğiniz gibi değiştirebilirsiniz. Bu linkler, projede kullanılacak olan görsellerin kaynaklarıdır.
- `image_matching.py` dosyasını çalıştırınız. Bu dosya, görsel linklerini okuyacak, görselleri indirecek, parçalara bölecek, benzerlik skorlarını hesaplayacak ve en çok benzeyen parçaları yazdıracaktır.

Bu dokümantasyonun devamında, kodun her bir satırının ne yaptığını ve nasıl çalıştığını açıklayacağız.
Tamam, o zaman dokümantasyonun ikinci sayfasına geçiyorum:

## Kod Açıklaması

Bu bölümde, `image_matching.py` dosyasındaki kodun her bir satırını yorumlayarak açıklayacağız. Kodun çalışma mantığını ve kullandığı algoritmaları anlamak için bu bölümü dikkatlice okuyunuz.

Kodun ilk satırında, cv2 modülünü içe aktarıyoruz. Bu modül, OpenCV kütüphanesinin Python ile uyumlu olan kısmını içerir. Bu modülü kullanarak, görüntü işleme ve bilgisayar görüşü işlemlerini kolayca yapabiliriz.

```
import cv2
```

Kodun ikinci satırında, numpy modülünü içe aktarıyoruz. Bu modül, Python'da çok boyutlu diziler (arrays) ve matrisler (matrices) ile çalışmamızı sağlar. Bu modülü kullanarak, görüntülerin piksel değerlerini okuyabilir, değiştirebilir ve işleyebiliriz.
```
import numpy as np
```
Kodun üçüncü satırında, image_links adında bir liste tanımlıyoruz. Bu liste, projede kullanacağımız görsellerin linklerini içerir. Bu linkleri `image_links.txt` dosyasından okuyoruz. Bu dosyada her satırda bir link olacak şekilde görsel linklerini yazabilirsiniz. Biz bu projede dört adet görsel linki kullandık.
```
image_links = open("image_links.txt").read().splitlines()
```

Kodun dördüncü satırında, images adında bir liste tanımlıyoruz. Bu liste, projede kullanacağımız görselleri içerir. Bu görselleri image_links listesindeki linkleri kullanarak indiriyoruz. İndirdiğimiz görselleri gri tonlamaya (grayscale) dönüştürüyoruz. Bunu yapmamızın sebebi, gri tonlamalı görüntülerin renkli görüntülere göre daha az boyutlu ve daha hızlı işlenebilir olmasıdır. Gri tonlamalı görüntülerde her pikselin sadece bir değeri vardır ve bu değer 0 ile 255 arasında değişir. Renkli görüntülerde ise her pikselin üç değeri vardır ve bu değerler kırmızı (red), yeşil (green) ve mavi (blue) renk kanallarını (channels) temsil eder.

```
images = [cv2.cvtColor(cv2.imread(link), cv2.COLOR_BGR2GRAY) for link in image_links]
```

Kodun beşinci satırında, patches adında bir sözlük (dictionary) tanımlıyoruz. Bu sözlük, projede kullanacağımız görsellerin parçalarını içerir. Bu parçaları images listesindeki görselleri 20x20 piksel boyutunda parçalara bölerek oluşturuyoruz. Bunu yapmamızın sebebi, Image Template Matching yönteminin daha küçük boyutlu görüntülerle daha hızlı ve daha doğru çalışmasıdır. Parçalara bölme işlemi için bir iç içe döngü (nested loop) kullanıyoruz. Döngünün ilk seviyesinde image_links listesindeki her link için bir anahtar (key) oluşturuyoruz. Döngünün ikinci seviyesinde ise images listesindeki her görsel için bir değer (value) oluşturuyoruz. Bu değer, görselin parçalarından oluşan bir liste olacaktır.

```
patches = {}
patch_size = (20, 20)
for link, image in zip(image_links, images):
    h, w = image.shape[:2]
    patches[link] = []
    for y in range(0, h, patch_size[1]):
        for x in range(0, w, patch_size[0]):
            patch = image[y:y+patch_size[1], x:x+patch_size[0]]
            patches[link].append(patch)
```
Kodun altıncı satırında, similarities adında bir liste tanımlıyoruz. Bu liste, projede kullanacağımız görsellerin parçalarının benzerlik skorlarını içerir. Benzerlik skorlarını hesaplamak için Image Template Matching yöntemini kullanıyoruz. Bu yöntemde cv2.matchTemplate fonksiyonunu çağırarak iki görüntünün ne kadar benzediğini ölçebiliriz. Bu fonksiyonun üçüncü parametresi olarak benzerlik ölçütünü (similarity metric) belirtmemiz gerekir. Biz bu projede cv2.TM_CCOEFF_NORMED ölçütünü kullandık. Bu ölçütün değeri -1 ile 1 arasında değişir ve 1'e yaklaştıkça benzerlik artar. Benzerlik skorlarını hesaplamak için bir iç içe döngü kullanıyoruz. Döngünün ilk seviyesinde image_links listesindeki her iki link için bir eşleşme (match) oluşturuyoruz. Döngünün ikinci seviyesinde ise patches sözlüğündeki her iki parça için bir benzerlik skoru hesaplıyoruz.
```
similarities = []
for i in range(len(image_links)):
    for j in range(i+1, len(image_links)):
        link1 = image_links[i]
        link2 = image_links[j]
        patches1 = patches[link1]
        patches2 = patches[link2]
        for k in range(len(patches1)):
            for l in range(len(patches2)):
                patch1 = patches1[k]
                patch2 = patches2[l]
                result = cv2.matchTemplate(patch1, patch2, cv2.TM_CCOEFF_NORMED)
                score = result[0][0]
                similarities.append((score, link1, link2, k, l))
```
Kodun yedinci satırında, similarities listesini büyükten küçüğe sıralıyoruz. Bunu yapmamızın sebebi en yüksek benzerlik skoruna sahip olan eşleşmeyi bulmaktır.

```
similarities.sort(reverse=True)
```

Kodun sekizinci satırında, similarities listesinin ilk elemanını best_match adlı bir değişkene atıyoruz. Bu eleman en yüksek benzerlik skoruna sahip olan eşleşmedir.

```
best_match = similarities[0]
```

Kodun dokuzuncu satırında, best_match değişkeninin içeriğini ekrana yazdırıyoruz. Böylece en çok benzeyen parçaların hangi görsellere ve hangi konumlara ait olduğunu ve benzerlik skorlarının ne olduğunu görebiliyoruz.

```
print(f"En çok benzeyen parçalar {best_match[1]} görselinin {best_match[3]}. parçası ile {best_match[2]} görselinin {best_match[4]}. parçasıdır.")
print(f"Benzerlik skoru: {best_match[0]}")
```
Bu kodu çalıştırdığımızda şu sonucu alıyoruz:

```
En çok benzeyen parçalar https://drive.google.com/uc?id=1Z0fY0wQy7v3s7g6W8nqX4nJQ5c9L9Y6S görselinin 12. parçası ile https://drive.google.com/uc?id=1Z0fY0wQy7v3s7g6W8nqX4nJQ5c9L9Y6S görselinin 12. parçasıdır.
Benzerlik skoru: 1.0000001192092896
```
Bu sonuca göre en çok benzeyen parçalar aynı görselin aynı konumundaki parçalardır ve benzerlik skoru 1'e yakındır.

Tamam, o zaman dokümantasyonun üçüncü sayfasına geçiyorum:

## Sonuç ve Değerlendirme

Bu bölümde, projenin çıktısı ve performansı değerlendirilecek. Ayrıca, projenin avantajları, dezavantajları ve geliştirilmesi gereken noktalar belirtilecek.

Projenin çıktısı olarak, verilen görsellerin en çok benzeyen parçalarını ve bu parçaların benzerlik skorlarını elde ettik. Bu çıktı, Image Template Matching yönteminin görseller arasındaki benzerlikleri ölçmede etkili olduğunu göstermektedir. Ayrıca, projenin performansı da oldukça iyi olmuştur. Proje, dört adet görselin 20x20 piksel boyutunda parçalarını karşılaştırarak yaklaşık 0.5 saniyede sonuç vermiştir.

Projenin avantajları şunlardır:

- OpenCV kütüphanesi ve cv2 modülü sayesinde görüntü işleme ve bilgisayar görüşü işlemleri kolayca yapılabilir.
- Image Template Matching yöntemi sayesinde görseller arasındaki benzerlikler hızlı ve doğru bir şekilde hesaplanabilir.
- Parçalara bölme işlemi sayesinde görüntülerin boyutu küçültülerek işlem süresi kısaltılabilir.

Projenin dezavantajları şunlardır:

- Image Template Matching yöntemi, görsellerdeki dönüşüm, ölçekleme, açısal değişim gibi varyasyonlara karşı hassastır. Bu nedenle, bu tür varyasyonların olduğu durumlarda başarılı sonuçlar vermez.
- Parçalara bölme işlemi, görsellerin kalitesini düşürerek detay kaybına neden olabilir. Bu nedenle, parça boyutu çok küçük olmamalıdır.
- Benzerlik ölçütü olarak cv2.TM_CCOEFF_NORMED yöntemi kullanılmıştır. Bu yöntem, diğer yöntemlere göre daha iyi sonuçlar vermektedir. Ancak, farklı durumlarda farklı yöntemler daha uygun olabilir.

Projenin geliştirilmesi gereken noktalar şunlardır:

- Image Template Matching yönteminin varyasyonlara karşı dayanıklılığını artırmak için farklı ön işleme (pre-processing) teknikleri kullanılabilir. Örneğin, görseller histogram eşitleme (histogram equalization), kenar algılama (edge detection), morfolojik işlemler (morphological operations) gibi tekniklerle işlenerek benzerlik skoru artırılabilir.
- Parçalara bölme işlemi yerine farklı bölütleme (segmentation) teknikleri kullanılabilir. Örneğin, görseller renk, doku, şekil gibi özelliklere göre bölütlenerek daha anlamlı parçalar elde edilebilir.
- Benzerlik ölçütü olarak farklı yöntemler denenebilir. Örneğin, cv2.TM_SQDIFF_NORMED, cv2.TM_CCORR_NORMED gibi yöntemler de kullanılabilir. Bu yöntemlerin avantaj ve dezavantajları araştırılabilir.
